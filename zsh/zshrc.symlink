# SET UP OH MY ZSH.

# Show hidden files on mac.
defaults write com.apple.Finder AppleShowAllFiles YES

# Path to your oh-my-zsh installation.
export ZSH="/Users/dylangoldsborough/.oh-my-zsh"
# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

export PATH="$HOME/.cargo/bin:$PATH"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
# ZSH_THEME="robbyrussell"
# ZSH_THEME="spaceship"
plugins=(you-should-use $plugins)
source $ZSH/oh-my-zsh.sh

source /usr/local/opt/powerlevel9k/powerlevel9k.zsh-theme
POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
POWERLEVEL9K_SHORTEN_DELIMITER=””
POWERLEVEL9K_SHORTEN_STRATEGY=”truncate_from_right”
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir vcs virtualenv kubecontext status)

# ZSH SPECIFIC SETUP.

# Allow corrections.
ENABLE_CORRECTION="true"

# Add wisely, as too many plugins slow down shell startup.
plugins=(git osx python bash zsh-syntax-highlighting)

# DEFINE ALIASES.
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias cd='cd -P'
alias cd..='cd ..'
alias cp='cp -iv'                           # Preferred 'cp' implementation
alias dir='dir --color=auto'
alias fileserver='python -m http.server 8000'
alias isrt='isort -rc .'                    # pip install isort[pipfile]
alias l='ls -CF -h'
alias la='ls -h -A -G'
alias less='less -FSRXc'                    # Preferred 'less' implementation
alias ll='ls -lh -G'
alias lla='ls -A -lh -G'
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mvnc='mvn -T 1.0C clean install -DskipTests -Dverification.skip -Dfrontend.skip'
alias numFiles='echo $(ls -1 | wc -l)'      # Count of non-hidden files in current dir
alias ticket='open -a Firefox https://picnic.atlassian.net/browse/$(git rev-parse --abbrev-ref HEAD | cut -d/ -f2)'
alias path='echo -e ${PATH//:/\\n}'         # Echo all executable Paths
alias pip='pip3'
alias please='sudo $(fc -ln -1)'
alias pybuild='python3 setup.py sdist bdist bdist_wheel'
alias pyfmt='docker run --rm -v "${pwd}:/src" python-tools format all'
alias pymodtest='rm -r ./dist ./build & pybuild & pipenv install -e . & pipenv install ./dist/*.whl & pipenv run pytest test --log-level debug > test_result.log'
alias python='python3'
alias rasplocal='ssh pi@192.168.178.23'
alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
alias vim='vim -O'

# DOCKER

# In case docker/docker-compose is not doing what you want and you forgot how to reset everything.
alias dockerprune='docker system prune -a --volumes'
alias fuckcompose='docker-compose down && docker-compose rm && docker-compose kill -s SIGINT'
alias fuckcontainers='docker stop $(docker ps -a -q) & docker rm $(docker ps -a -q)'

# KUBERNETES

# https://ahmet.im/blog/kubectl-aliases/
alias k='kubectl'
alias kg='kubectl get'
alias kgjo='kubectl get jobs'
alias kgjof="kubectl get job -o json | jq -r '.items[] | select(.status.conditions[0].type == \"Failed\") | .metadata.name'"
alias kgjofd="kubectl get job -o json | jq -r '.items[] | select(.status.conditions[0].type == \"Failed\") | .metadata.name' | xargs kubectl delete job"
alias kgpo='kubectl get pods'
alias kgpoojson='kubectl get pods -o=json'
alias kgpon='kubectl get pods --namespace'

alias kdp='kubectl describe pod'

alias krm='kubectl delete'
alias krmf='kubectl delete -f'
alias krming='kubectl delete ingress'
alias krmingl='kubectl delete ingress -l'
alias krmingall='kubectl delete ingress --all-namespaces'

alias ka='kubectl apply -f'
alias klo='kubectl logs -f'
alias kex='kubectl exec -i -t'

alias kcc='kubectl config use-context'
alias kcns='f(){ kubectl config set-context $(kubectl config current-context) --namespace="$@";  unset -f f; }; f'

# SET ENVIRONMENT VARIABLES.
export GITHUB_USER=dgoldsb
export NEXUS_USERNAME=dgoldsborough
export NEXUS_PASSWORD=
export NEXUS_PASSWORD_PY=
export LC_ALL=en_US.UTF-8  # fixes Google docstring support in IntelliJ
export LANG=en_US.UTF-8  # fixes Google docstring support in IntelliJ

# CUSTOM FUNCTIONS.
# Make a branch for a ticket
function bt() {
    if [[ "$1" =~ '[A-Z]+-[0-9]+' ]]; then
        eval "git pull && git checkout -b dgoldsborough/$1"
    else
        echo "Not a valid Jira ticket!"
    fi
}

# Commit easily to a ticket branch.
function bc() {
    if [[ "$(git rev-parse --abbrev-ref HEAD)" =~ '[A-Z]+-[0-9]+' ]]; then
        ticket=$MATCH
  	    echo "Writing a commit with ticket ${ticket}"
  	    command="git commit -m \"$ticket $1\""
  	    eval "${command}"
    else
        echo "Not a Jira ticket branch!"
    fi
}

# Delete a kubernetes pod in data-workflows
function kddw() {
  command="kubectl delete pod $1 -n data-workflows"
  eval "${command}"
}

# Get pods in data-workflows
alias kpdw='kubectl get pods -n data-workflows'

# Get logs of a pod in data-workflows
function kldw() {
  command="kubectl logs -f $1 -n data-workflows main"
  eval "${command}"
}

# Delete local branches
alias gclean='git remote prune origin'

# Check code complexity, based on https://realpython.com/python-refactoring/.
checkfilecomplexity() {
  eval "wc -l $1"
  eval "radon cc $1 -s"
  eval "radon hal $1"
  eval "radon mi $1 -s"
}

checkprojectcomplexity() {
  eval "wily build $1"
  wily list-metrics
  eval "find $1 -name \*.py | xargs wily report"
}

# Extract any file.
function extract() {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# USEFUL TOOLS

# Autojump.
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# Fuzzy file finder (fzf).
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [ -e ~/.fzf ]; then
  PATH=$PATH:~/.fzf/bin
  source ~/.fzf/shell/key-bindings.zsh
  source ~/.fzf/shell/completion.zsh
fi

# fzf + ag configuration
export FZF_DEFAULT_COMMAND='ag --nocolor -g ""'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_DEFAULT_OPTS='
--color fg:242,bg:236,hl:65,fg+:15,bg+:239,hl+:108
--color info:108,prompt:109,spinner:108,pointer:168,marker:168
'

# Too Long; Didn't Read (tldr).

# Git filter branch
# git filter-branch --index-filter 'git rm --cached -qr --ignore-unmatch -- . && git reset -q $GIT_COMMIT -- folder1/ folder2/' --prune-empty --tag-name-filter cat -- --all

# Rebase with exec
# http://kamalmarhubi.com/blog/2016/03/08/git-rebase-exec-make-sure-your-tests-pass-at-each-commit-and-other-rebase-goodies/
# git rebase --interactive --exec "cmd" some-ref

# ZSH auto-suggestions.
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# TheFuck.
eval $(thefuck --alias)

# zsh-syntax-highlighting
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# kube-ps1
source "/usr/local/opt/kube-ps1/share/kube-ps1.sh"
PS1='$(kube_ps1)'$PS1
